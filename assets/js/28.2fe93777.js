(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{190:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"列表和元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列表和元组","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表和元组")]),t._v(" "),s("h2",{attrs:{id:"列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list","aria-hidden":"true"}},[t._v("#")]),t._v(" list")]),t._v(" "),s("p",[t._v("可迭代 可变 有序\n使用方括号来创建列表")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("li "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"索引和切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引和切片","aria-hidden":"true"}},[t._v("#")]),t._v(" 索引和切片")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nli"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h4",{attrs:{id:"操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作符")]),t._v(" "),s("p",[t._v("[]+[]  拼合\n[]*int  重复\nindex in [] 成员是否存在")]),t._v(" "),s("h4",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("p",[s("code",[t._v("len(list)")]),t._v(" 获取长度")]),t._v(" "),s("p",[s("code",[t._v("list()")]),t._v(" 转化为列表类型 是一个迭代器")]),t._v(" "),s("p",[s("code",[t._v("''.join(list)")]),t._v(" 将列表转为字符串")]),t._v(" "),s("p",[s("code",[t._v("max()")]),t._v("/"),s("code",[t._v("min()")]),t._v("求最值 ,可选参数key进行操作")]),t._v(" "),s("p",[s("code",[t._v(".count(value)")]),t._v("计次")]),t._v(" "),s("p",[s("code",[t._v(".copy()")]),t._v("浅拷贝")]),t._v(" "),s("h5",{attrs:{id:"增删改查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增删改查","aria-hidden":"true"}},[t._v("#")]),t._v(" 增删改查")]),t._v(" "),s("p",[s("code",[t._v(".append(p)")]),t._v(" 追加")]),t._v(" "),s("p",[s("code",[t._v(".extend(iterable)")]),t._v("迭代追加")]),t._v(" "),s("p",[s("code",[t._v(".insert(index,obj)")]),t._v("插入")]),t._v(" "),s("p",[s("code",[t._v(".pop(index=-1)")]),t._v(" 删除默认最后一个 并返回它的值")]),t._v(" "),s("p",[s("code",[t._v(".remove(value)")]),t._v(" 删除")]),t._v(" "),s("p",[s("code",[t._v("del")]),t._v(" 删除 索引/切片")]),t._v(" "),s("p",[s("code",[t._v(".clear()")]),t._v(" 清空")]),t._v(" "),s("p",[s("code",[t._v(".index(value)")]),t._v("查询是否存在,不存在会报错")]),t._v(" "),s("h5",{attrs:{id:"排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),s("p",[s("code",[t._v(".sort(key=None,reverse=False)")]),t._v(" 永久排序")]),t._v(" "),s("p",[s("code",[t._v(".reverse()")]),t._v("倒序")]),t._v(" "),s("h2",{attrs:{id:"元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元组","aria-hidden":"true"}},[t._v("#")]),t._v(" 元组")]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"tuple"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple","aria-hidden":"true"}},[t._v("#")]),t._v(" tuple")]),t._v(" "),s("p",[t._v("可迭代 不可变 有序\n元组中只包含一个元素时，需要在元素后面添加逗号\n创建元组使用小括号")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("tup "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("p",[s("code",[t._v(".count()")])]),t._v(" "),s("p",[s("code",[t._v(".index()")])]),t._v(" "),s("h2",{attrs:{id:"内置函数range"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置函数range","aria-hidden":"true"}},[t._v("#")]),t._v(" 内置函数range()")]),t._v(" "),s("p",[t._v("可创建一个整数列表，一般用在 for 循环中")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nrange(start, stop[, step])\nPython3.x 中 range() 函数返回的结果是一个整数序列的可迭代对象,而不是列表\n可以用list() 函数把range()返回的可迭代对象转为一个列表 \n"""')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n")])])])])}],!1,null,null,null);a.default=n.exports}}]);