(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{109:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"初识python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识python"}},[t._v("#")]),t._v(" 初识python")]),t._v(" "),a("h2",{attrs:{id:"计算机基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机基础"}},[t._v("#")]),t._v(" 计算机基础")]),t._v(" "),a("p",[t._v("内存：储存数据。最早128MB内存条，发展到8G,16G,32G，成本高，断电即消失。"),a("br"),t._v("\n硬盘：储存数据。固态硬盘/机械硬盘，长久保持数据。"),a("br"),t._v("\n操作系统：纯命令行发展为图形界面，"),a("br"),t._v("\n应用程序：操作系统也是应用程序。")]),t._v(" "),a("h2",{attrs:{id:"python历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python历史"}},[t._v("#")]),t._v(" python历史")]),t._v(" "),a("p",[t._v("宏观上：python2 与 python3 区别：")]),t._v(" "),a("ul",[a("li",[t._v("python2 源码不标准，混乱，重复代码太多，")]),t._v(" "),a("li",[t._v("python3 统一 标准，去除重复代码。")])]),t._v(" "),a("h2",{attrs:{id:"python的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的特点"}},[t._v("#")]),t._v(" python的特点")]),t._v(" "),a("p",[t._v("强类型，动态解释型，脚本语言")]),t._v(" "),a("h3",{attrs:{id:"python的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的发展"}},[t._v("#")]),t._v(" python的发展")]),t._v(" "),a("p",[t._v("...")]),t._v(" "),a("h2",{attrs:{id:"python种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python种类"}},[t._v("#")]),t._v(" python种类")]),t._v(" "),a("h3",{attrs:{id:"从实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从实现"}},[t._v("#")]),t._v(" 从实现:")]),t._v(" "),a("p",[t._v("我们用的都是"),a("code",[t._v("CPython")]),t._v("就是用C语言实现的Python及其解释器（JIT编译器）"),a("br"),t._v("\n速度最快的是"),a("code",[t._v("pypy")]),t._v("是python自己实现的自己"),a("br"),t._v("\n其他版本:C++("),a("code",[t._v("Pyston")]),t._v(")    \\    Java("),a("code",[t._v("Jython")]),t._v(")    \\    C#("),a("code",[t._v("IronPython")]),t._v(")")]),t._v(" "),a("h3",{attrs:{id:"从版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从版本"}},[t._v("#")]),t._v(" 从版本:")]),t._v(" "),a("ul",[a("li",[t._v("python2")]),t._v(" "),a("li",[t._v("python3")])]),t._v(" "),a("p",[t._v("区别：python2默认编码方式是ascii码，python3是Unicode"),a("br"),t._v("\n解决编码问题：在文件的首行："),a("code",[t._v("#-*- encoding:utf-8 -*-")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("SyntaxError: Non-UTF-8 code starting with ...")]),t._v(" "),a("p",[t._v("在python3中的中文也有小概率遇到这种情况"),a("br"),t._v("\n也是通过 "),a("code",[t._v("#-*- encoding:utf-8 -*-")]),t._v(" 来解决")])]),t._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("变量：就是将一些运算的中间结果暂存到内存中，以便后续代码调用。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("必须由数字，字母，下划线任意组合，且不能数字开头。")])]),t._v(" "),a("li",[a("p",[t._v("不能是python中的关键字 以下:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'and'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'as'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'break'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'class'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'continue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'def'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'del'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'elif'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'else'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'except'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exec'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'finally'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'for'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'global'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'if'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'import'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'in'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lambda'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'or'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pass'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'print'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'raise'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'return'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'try'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'while'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'with'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yield'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("变量具有可描述性。")])]),t._v(" "),a("li",[a("p",[t._v("不能是汉字等字符。")])])]),t._v(" "),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("p",[t._v("客观不变的量 或者程序员不希望它被修改的量。如:")]),t._v(" "),a("ul",[a("li",[t._v("圆周率"),a("code",[t._v("π=3.14")])]),t._v(" "),a("li",[t._v("自然对数底数"),a("code",[t._v("e=2.71")])]),t._v(" "),a("li",[a("code",[t._v("BIR_OF_CHINA = 1949")])])]),t._v(" "),a("h2",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),a("p",[t._v("方便自己方便他人理解代码。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单行注释："),a("code",[t._v("#")])])]),t._v(" "),a("li",[a("p",[t._v("多行注释："),a("code",[t._v("'''")]),t._v("被注释内容"),a("code",[t._v("'''")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n\n被注释内容:代码千万行,注释第一行,注释不规范,亲人两行泪\n\n"""')]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("它不仅是注释，也是带换行的字符串块")]),t._v(" "),a("h2",{attrs:{id:"用户交互input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户交互input"}},[t._v("#")]),t._v(" 用户交互"),a("code",[t._v("input")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请输入"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("1，等待输入。\n2，将输入的内容赋值给了前面变量。\n3，"),a("code",[t._v("input")]),t._v("接受的数据类型全部是"),a("code",[t._v("str")]),t._v("类型（字符串类型）")]),t._v(" "),a("h2",{attrs:{id:"基础数据类型初始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础数据类型初始"}},[t._v("#")]),t._v(" 基础数据类型初始")]),t._v(" "),a("p",[t._v("基础数据类型有：数字，字符串，列表，元组，字典"),a("br"),t._v("\n内置函数"),a("code",[t._v("type()")]),t._v("返回变量的类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("整型："),a("code",[t._v("int")]),t._v("，十进制的整数类型"),a("br"),t._v("\n数字类型还有浮点型和复数类型，可以相互转换。"),a("br"),t._v("\n数字类型可以参与一些算数运算符：加减乘除"),a("br"),t._v("\n字符串转化成数字："),a("code",[t._v("int(str)")]),t._v(" 条件：str必须是数字组成的。"),a("br"),t._v("\n数字转化成字符串："),a("code",[t._v("str(int)")])])]),t._v(" "),a("li",[a("p",[t._v("布尔值："),a("code",[t._v("bool")]),a("br"),t._v("\nTrue   False  表示真假  是逻辑运算表达式的结果"),a("br"),t._v("\n布尔类型并不是基础数据类型 是"),a("strong",[t._v("继承")]),t._v("的整型的"),a("code",[t._v("1")]),t._v("和"),a("code",[t._v("0")])])]),t._v(" "),a("li",[a("p",[t._v("字符串："),a("code",[t._v("str")]),a("br"),t._v("\npython当中凡是用引号引起来的都是字符串。"),a("br"),t._v("\n可相加：str + str  拼接"),a("br"),t._v("\n可相乘：str * int  复读")])]),t._v(" "),a("li",[a("p",[t._v("列表："),a("code",[t._v("list")]),a("br"),t._v("\n一个具有顺序的容器，可以在里面放置其他类型"),a("br"),t._v("\n用花括号包裹，各个成员之间用逗号隔开："),a("br"),t._v(" "),a("code",[t._v('[ 2019, "春节"]')])])]),t._v(" "),a("li",[a("p",[t._v("...")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);