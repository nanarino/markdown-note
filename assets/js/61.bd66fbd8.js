(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{256:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[t._v("#")]),t._v(" 流程控制")]),t._v(" "),a("h2",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("成员运算符："),a("code",[t._v("in")]),t._v("后面讲列表了会讲")])]),t._v(" "),a("li",[a("p",[t._v("比较运算符："),a("code",[t._v("==")]),t._v(" "),a("code",[t._v(">")]),t._v(" "),a("code",[t._v(">=")]),t._v(" "),a("code",[t._v("<")]),t._v(" "),a("code",[t._v("<=")]),t._v(" "),a("code",[t._v("<>")]),t._v(" "),a("code",[t._v("!=")]),a("br"),t._v("\n对于"),a("code",[t._v("None")]),t._v("的判断除了比较运算符，更推荐用"),a("code",[t._v("is None")]),t._v(" 和 "),a("code",[t._v("is not None")]),a("br"),t._v("\n在python3中，是否不等于"),a("code",[t._v("<>")]),t._v("被取消了，想要使用需要先引入模块")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" barry_as_FLUFL\n")])])])]),t._v(" "),a("li",[a("p",[t._v("逻辑运算符："),a("code",[t._v("and")]),t._v(" "),a("code",[t._v("or")]),t._v(" "),a("code",[t._v("not")])])]),t._v(" "),a("li",[a("p",[t._v("位运算符："),a("code",[t._v("|")]),t._v(" "),a("code",[t._v("&")]),t._v(" "),a("code",[t._v("~")]),t._v(" "),a("code",[t._v("^")]),t._v(" "),a("code",[t._v(">>")]),t._v(" "),a("code",[t._v("<<")])])])]),t._v(" "),a("p",[t._v("内置模块"),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/operator.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("operator")]),a("OutboundLink")],1),t._v("里的函数与运算符映射。")]),t._v(" "),a("h2",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),a("p",[t._v("赋值运算符 "),a("code",[t._v("=")]),t._v(" 用于给变量赋值。"),a("br"),t._v("\n在python中，声明和赋值都是等号 "),a("code",[t._v("=")]),t._v(" ，赋值语句本身不会返回任何结果"),a("br"),t._v("\n在python3.8中新增的海象运算符（the walrus operator）"),a("code",[t._v(":=")]),t._v("，其表达式会赋值同时返回左值的引用。")]),t._v(" "),a("h4",{attrs:{id:"连用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连用"}},[t._v("#")]),t._v(" 连用")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("赋予相当于起别名，多个变量表示的会是同一个内存地址")]),t._v(" "),a("h3",{attrs:{id:"内置函数id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数id"}},[t._v("#")]),t._v(" 内置函数"),a("code",[t._v("id()")])]),t._v(" "),a("p",[t._v("使用内置函数"),a("code",[t._v("id()")]),t._v("可以查看内存地址的表示；"),a("br"),t._v("\n布尔表达式中也可以连用比较"),a("code",[t._v("==")]),t._v("，多个值全等的时候将返回"),a("code",[t._v("Ture")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当变量被修改的时候，内置函数"),a("code",[t._v("id()")]),t._v("也会重新指向。"),a("br"),t._v("\n对于可变的容器类型，其成员被修改，容器的"),a("code",[t._v("id()")]),t._v("将不会发生变化。")]),t._v(" "),a("h2",{attrs:{id:"布尔表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔表达式"}},[t._v("#")]),t._v(" 布尔表达式")]),t._v(" "),a("p",[t._v("布尔表达式是逻辑运算的计算式。"),a("br"),t._v("\n逻辑运算符优先级为："),a("code",[t._v("()")]),t._v("> "),a("code",[t._v("not")]),t._v("> "),a("code",[t._v("and")]),t._v(" > "),a("code",[t._v("or")]),t._v(" 。同优先级进行从左往右先后计算。"),a("br"),t._v("\n二元逻辑运算符会先后将其两边的表达式结果，"),a("strong",[t._v("隐式地")]),t._v("转化为"),a("code",[t._v("bool")]),t._v("类型后再参与逻辑运算")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#相当于 bool(1) and True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),a("p",[t._v("内置函数"),a("code",[t._v("bool()")]),t._v("会"),a("strong",[t._v("显式地")]),t._v("把其他类型转换为"),a("code",[t._v("bool")]),t._v("类型"),a("br"),t._v(" "),a("code",[t._v("bool")]),t._v("类型只有两个值："),a("code",[t._v("True")]),t._v("和"),a("code",[t._v("False")])]),t._v(" "),a("ul",[a("li",[t._v("非零非空转换成布尔类型是 "),a("code",[t._v("True")])]),t._v(" "),a("li",[t._v("0 ，None等值转换成布尔类型是 "),a("code",[t._v("False")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("值得注意的是：")]),t._v(" "),a("p",[t._v("与JavaScript不同，python中如"),a("code",[t._v("bool([])")]),t._v("等空对象都是False。"),a("br"),t._v("\n而JavaScript中只要是对象都是true。"),a("br"),t._v("\n事实上，这是对象的魔术方法"),a("code",[t._v("__bool__")]),t._v("所定义的。")])]),t._v(" "),a("h4",{attrs:{id:"连用-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连用-2"}},[t._v("#")]),t._v(" 连用")]),t._v(" "),a("p",[t._v("比较运算符可以连续使用")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2015")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2018")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("p",[t._v("if等分支语句需要换行缩进，推荐4空格。也可以是tab，但是要一致。")]),t._v(" "),a("p",[t._v("只有一行语句时可以不换行。")]),t._v(" "),a("h3",{attrs:{id:"短路法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短路法"}},[t._v("#")]),t._v(" 短路法")]),t._v(" "),a("p",[t._v("在计算布尔表达式结果时往往只判断左边就既定了结果："),a("br"),t._v(" "),a("code",[t._v("x or y")]),t._v(" 如果"),a("code",[t._v("x==True")]),t._v("，则返回x"),a("br"),t._v(" "),a("code",[t._v("x and y")]),t._v(" 如果"),a("code",[t._v("x==True")]),t._v("，则返回y"),a("br"),t._v("\n短路之后，逻辑运算符右侧的"),a("strong",[t._v("隐式")]),t._v("进行类型转换将不会进行，直接返回：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h2",{attrs:{id:"流程控制-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制-2"}},[t._v("#")]),t._v(" 流程控制")]),t._v(" "),a("p",[a("strong",[t._v("python中 流程控制相关代码块都不具备独立的命名空间")]),a("br"),t._v("\n流程控制中的条件是布尔表达式，"),a("code",[t._v("if")]),t._v(" "),a("code",[t._v("while")]),t._v("也能"),a("strong",[t._v("隐式")]),t._v("地将结果转换为布尔值：")]),t._v(" "),a("h3",{attrs:{id:"if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if"}},[t._v("#")]),t._v(" if")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#条件满足就...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#否则就...")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("if")]),t._v("…"),a("code",[t._v("elif")]),t._v("…"),a("code",[t._v("else")]),t._v("语句 可以并列多个条件")]),t._v(" "),a("li",[a("code",[t._v("pass")]),t._v(" 表示空语句,一般起到占位作用")])]),t._v(" "),a("h3",{attrs:{id:"while"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while"}},[t._v("#")]),t._v(" while")]),t._v(" "),a("p",[t._v("终止循环的方式：")]),t._v(" "),a("ul",[a("li",[t._v("改变条件，使其不成立。")]),t._v(" "),a("li",[a("code",[t._v("break")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    循环体\n")])])]),a("p",[a("code",[t._v("continue")]),t._v("可以跳过本轮循环")]),t._v(" "),a("h4",{attrs:{id:"while也有else"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while也有else"}},[t._v("#")]),t._v(" while也有else")]),t._v(" "),a("p",[t._v("循环正常执行完（不"),a("code",[t._v("break")]),t._v("），或第一次就不满足时进入else分支。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"循环正常执行完"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"语句和表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句和表达式"}},[t._v("#")]),t._v(" 语句和表达式")]),t._v(" "),a("p",[t._v("在python中，"),a("code",[t._v("a + b")]),t._v("是表达式，"),a("code",[t._v("a = b")]),t._v("是语句")]),t._v(" "),a("h3",{attrs:{id:"内置函数eval-和exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数eval-和exec"}},[t._v("#")]),t._v(" 内置函数"),a("code",[t._v("eval()")]),t._v("和"),a("code",[t._v("exec()")])]),t._v(" "),a("p",[a("code",[t._v("exec")]),t._v("可以将字符串或字节代码对象当作"),a("strong",[t._v("语句")]),t._v("执行。"),a("br"),t._v(" "),a("code",[t._v("eval")]),t._v("可以将字符串或字节代码对象当作"),a("strong",[t._v("表达式")]),t._v("执行得到返回值。"),a("br"),t._v("\n如果使用"),a("code",[t._v("eval")]),t._v("执行的原代码块是语句而不是表达式将会抛出"),a("code",[t._v("SyntaxError")]),t._v("异常。"),a("br"),t._v("\n异常处理将在下一章讲到。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#模拟python shell交互式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>>> '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" SyntaxError "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Traceback (most recent call last):"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"内置函数compile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数compile"}},[t._v("#")]),t._v(" 内置函数"),a("code",[t._v("compile()")])]),t._v(" "),a("p",[a("code",[t._v("compile()")]),t._v(" 函数将一个字符串编译为字节代码对象。"),a("br"),t._v("\nmode参数指定编译代码的种类。可以指定为 "),a("code",[t._v("'exec'")]),t._v(", "),a("code",[t._v("'eval'")]),t._v(", "),a("code",[t._v("'single'")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#模拟python shell交互式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>>> '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'single'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Traceback (most recent call last):"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("两种模拟交互的方式略有区别，前者可以返回"),a("code",[t._v("None")]),t._v("值，但这往往不符合预期。")]),t._v(" "),a("h2",{attrs:{id:"for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for  in")]),t._v(" "),a("p",[t._v("可以循环一个可迭代对象")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 成员变量 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 容器"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t循环体\n")])])]),a("p",[t._v("例如，打印名单，这里以列表为例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("namelist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Aqua'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Shion'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ayame'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" namelist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"for也有else"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for也有else"}},[t._v("#")]),t._v(" for也有else")]),t._v(" "),a("p",[t._v("循环正常执行完（不"),a("code",[t._v("break")]),t._v("），或"),a("code",[t._v("for in 空容器")]),t._v("时进入else分支。")])])}),[],!1,null,null,null);s.default=n.exports}}]);