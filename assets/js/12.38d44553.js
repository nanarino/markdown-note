(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{208:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"闭包和装饰器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包和装饰器","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包和装饰器")]),t._v(" "),s("p",[t._v("闭包是函数作用域的体现\n装饰器本质就是函数,功能是为其他函数添加附加功能")]),t._v(" "),s("h4",{attrs:{id:"开放封闭原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放封闭原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 开放封闭原则")]),t._v(" "),s("blockquote",[s("p",[t._v("​    不修改被修饰函数的源代码\n不修改被修改函数的调用方式")])]),t._v(" "),s("h4",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("p",[t._v("​    "),s("u",[t._v("高阶函数")]),t._v("  和  "),s("u",[t._v("闭包")])]),t._v(" "),s("blockquote",[s("h2",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("p",[t._v("闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，闭包是由函数和与其相关的引用环境组合而成的实体。")]),t._v(" "),s("p",[t._v("闭包的原理，当内嵌函数引用了包含它的函数（enclosing function）中的non-local 变量后，这些变量会被保存在enclosing function的"),s("code",[t._v("__closure__")]),t._v("属性中，成为enclosing function本身的一部分；也就是说，这些变量的生命周期会和enclosing function一样。")]),t._v(" "),s("p",[t._v("在Python中创建一个闭包可以归结为以下三点：")]),t._v(" "),s("ul",[s("li",[t._v("闭包函数必须有内嵌函数")]),t._v(" "),s("li",[t._v("内嵌函数需要引用该嵌套函数上一级namespace中的变量")]),t._v(" "),s("li",[t._v("闭包函数必须返回内嵌函数")])])]),t._v(" "),s("p",[t._v("装饰器名a 被修饰的函数名b\nb声明的前一行"),s("code",[t._v("@a")]),t._v(" 相当于"),s("code",[t._v("b=a(b)")])]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    code\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        code\n        res"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        code\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrapper\n    \n@foo  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])])])}],!1,null,null,null);a.default=e.exports}}]);