(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{199:function(t,a,n){"use strict";n.r(a);var s=n(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"正则表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),n("p",[t._v("正则表达式我在别的语言里面学过一遍,所以我直接抄了景女神的博客(博客园:Eva_J)")]),t._v(" "),n("p",[t._v("至于捕获不捕获的问题  我在python中没研究 以后学爬虫的时候再看吧")]),t._v(" "),n("blockquote",[n("p",[t._v("正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或者说：正则就是用来描述一类事物的规则。（在Python中）它内嵌在Python中，并通过 re 模块实现。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。")])]),t._v(" "),n("h3",{attrs:{id:"常用匹配范围"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用匹配范围","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用匹配范围")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("code",[t._v("正则")])]),t._v(" "),n("th",[n("code",[t._v("待匹配字符")])]),t._v(" "),n("th",[n("code",[t._v("匹配结果")])]),t._v(" "),n("th",[n("code",[t._v("说明")])])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("[0123456789]")])]),t._v(" "),n("td",[n("code",[t._v("8")])]),t._v(" "),n("td",[n("code",[t._v("True")])]),t._v(" "),n("td",[n("code",[t._v('在一个字符组里枚举合法的所有字符，字符组里的任意一个字符和"待匹配字符"相同都视为可以匹配')])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("[0123456789]")])]),t._v(" "),n("td",[n("code",[t._v("a")])]),t._v(" "),n("td",[n("code",[t._v("False")])]),t._v(" "),n("td",[n("code",[t._v('由于字符组中没有"a"字符，所以不能匹配')])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("[0-9]")])]),t._v(" "),n("td",[n("code",[t._v("7")])]),t._v(" "),n("td",[n("code",[t._v("True")])]),t._v(" "),n("td",[n("code",[t._v("也可以用-表示范围,[0-9]就和[0123456789]是一个意思")])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("[a-z]")])]),t._v(" "),n("td",[n("code",[t._v("s")])]),t._v(" "),n("td",[n("code",[t._v("True")])]),t._v(" "),n("td",[n("code",[t._v("同样的如果要匹配所有的小写字母，直接用[a-z]就可以表示")])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("[A-Z]")])]),t._v(" "),n("td",[n("code",[t._v("B")])]),t._v(" "),n("td",[n("code",[t._v("True")])]),t._v(" "),n("td",[n("code",[t._v("[A-Z]就表示所有的大写字母")])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("[0-9a-fA-F]")])]),t._v(" "),n("td",[n("code",[t._v("e")])]),t._v(" "),n("td",[n("code",[t._v("True")])]),t._v(" "),n("td",[n("code",[t._v("可以匹配数字，大小写形式的a～f，用来验证十六进制字符")])])])])]),t._v(" "),n("h3",{attrs:{id:"元字符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("code",[t._v("元字符")])]),t._v(" "),n("th",[n("code",[t._v("匹配内容")])])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v(".")]),t._v(" "),n("td",[t._v("匹配除换行符以外的任意字符")])]),t._v(" "),n("tr",[n("td",[t._v("\\w")]),t._v(" "),n("td",[t._v("匹配字母或数字或下划线")])]),t._v(" "),n("tr",[n("td",[t._v("\\s")]),t._v(" "),n("td",[t._v("匹配任意的空白符")])]),t._v(" "),n("tr",[n("td",[t._v("\\d")]),t._v(" "),n("td",[t._v("匹配数字")])]),t._v(" "),n("tr",[n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("匹配一个换行符")])]),t._v(" "),n("tr",[n("td",[t._v("\\t")]),t._v(" "),n("td",[t._v("匹配一个制表符")])]),t._v(" "),n("tr",[n("td",[t._v("\\b")]),t._v(" "),n("td",[t._v("匹配一个单词的结尾")])]),t._v(" "),n("tr",[n("td",[t._v("^")]),t._v(" "),n("td",[t._v("匹配字符串的开始")])]),t._v(" "),n("tr",[n("td",[t._v("$")]),t._v(" "),n("td",[t._v("匹配字符串的结尾")])]),t._v(" "),n("tr",[n("td",[t._v("\\W")]),t._v(" "),n("td",[n("code",[t._v("匹配非字母或数字或下划线")])])]),t._v(" "),n("tr",[n("td",[t._v("\\D")]),t._v(" "),n("td",[n("code",[t._v("匹配非数字")])])]),t._v(" "),n("tr",[n("td",[t._v("\\S")]),t._v(" "),n("td",[n("code",[t._v("匹配非空白符")])])]),t._v(" "),n("tr",[n("td",[t._v("a|b")]),t._v(" "),n("td",[n("code",[t._v("匹配字符a或字符b")])])]),t._v(" "),n("tr",[n("td",[t._v("()")]),t._v(" "),n("td",[n("code",[t._v("匹配括号内的表达式，也表示一个组")])])]),t._v(" "),n("tr",[n("td",[t._v("[...]")]),t._v(" "),n("td",[n("code",[t._v("匹配字符组中的字符")])])]),t._v(" "),n("tr",[n("td",[t._v("[^...]")]),t._v(" "),n("td",[n("code",[t._v("匹配除了字符组中字符的所有字符")])])])])]),t._v(" "),n("h3",{attrs:{id:"量词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#量词","aria-hidden":"true"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("code",[t._v("量词")])]),t._v(" "),n("th",[n("code",[t._v("用法说明")])])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("*")]),t._v(" "),n("td",[t._v("重复零次或更多次")])]),t._v(" "),n("tr",[n("td",[t._v("+")]),t._v(" "),n("td",[t._v("重复一次或更多次")])]),t._v(" "),n("tr",[n("td",[t._v("?")]),t._v(" "),n("td",[t._v("重复零次或一次")])]),t._v(" "),n("tr",[n("td",[t._v("{n}")]),t._v(" "),n("td",[t._v("重复n次")])]),t._v(" "),n("tr",[n("td",[t._v("{n,}")]),t._v(" "),n("td",[t._v("重复n次或更多次")])]),t._v(" "),n("tr",[n("td",[t._v("{n,m}")]),t._v(" "),n("td",[t._v("重复n到m次")])])])]),t._v(" "),n("h3",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")]),t._v(" . ^ $")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("海.")]),t._v(" "),n("td",[t._v("海燕海娇海东")]),t._v(" "),n("td",[t._v("海燕海娇海东")]),t._v(" "),n("td",[t._v('匹配所有"海."的字符')])]),t._v(" "),n("tr",[n("td",[t._v("^海.")]),t._v(" "),n("td",[t._v("海燕海娇海东")]),t._v(" "),n("td",[t._v("海燕")]),t._v(" "),n("td",[t._v('只从开头匹配"海."')])]),t._v(" "),n("tr",[n("td",[t._v("海.$")]),t._v(" "),n("td",[t._v("海燕海娇海东")]),t._v(" "),n("td",[t._v("海东")]),t._v(" "),n("td",[t._v('只匹配结尾的"海.$"')])])])]),t._v(" "),n("h3",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2","aria-hidden":"true"}},[t._v("#")]),t._v(" * + ? { }")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("李.?")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰 李莲 李二")]),t._v(" "),n("td",[n("code",[t._v('?表示重复零次或一次，即只匹配"李"后面一个任意字符')])])]),t._v(" "),n("tr",[n("td",[t._v("李.*")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[n("code",[t._v('*表示重复零次或多次，即匹配"李"后面0或多个任意字符')])])]),t._v(" "),n("tr",[n("td",[t._v("李.+")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[n("code",[t._v('+表示重复一次或多次，即只匹配"李"后面1个或多个任意字符')])])]),t._v(" "),n("tr",[n("td",[t._v("李.{1,2}")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰和 李莲英 李二棍")]),t._v(" "),n("td",[n("code",[t._v("{1,2}匹配1到2次任意字符")])])])])]),t._v(" "),n("p",[t._v("注意：前面的*,+,?等都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("李.*?")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李 李 李")]),t._v(" "),n("td",[t._v("惰性匹配")])])])]),t._v(" "),n("h3",{attrs:{id:"字符集［］［-］"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符集［］［-］","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符集［］［^］")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("李[杰莲英二棍子]*")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰 李莲英 李二棍子")]),t._v(" "),n("td",[n("code",[t._v('表示匹配"李"字后面[杰莲英二棍子]的字符任意次')])])]),t._v(" "),n("tr",[n("td",[t._v("李[^和]*")]),t._v(" "),n("td",[t._v("李杰和李莲英和李二棍子")]),t._v(" "),n("td",[t._v("李杰 李莲英 李二棍子")]),t._v(" "),n("td",[n("code",[t._v('表示匹配一个不是"和"的字符任意次')])])]),t._v(" "),n("tr",[n("td",[t._v("[\\d]")]),t._v(" "),n("td",[t._v("456bdha3")]),t._v(" "),n("td",[t._v("4 5 6 3")]),t._v(" "),n("td",[n("code",[t._v("表示匹配任意一个数字，匹配到4个结果")])])]),t._v(" "),n("tr",[n("td",[t._v("[\\d]+")]),t._v(" "),n("td",[t._v("456bdha3")]),t._v(" "),n("td",[t._v("456 3")]),t._v(" "),n("td",[n("code",[t._v("表示匹配任意个数字，匹配到2个结果")])])])])]),t._v(" "),n("h3",{attrs:{id:"分组-与-或-｜［-］"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分组-与-或-｜［-］","aria-hidden":"true"}},[t._v("#")]),t._v(" 分组 ()与 或 ｜［^］")]),t._v(" "),n("p",[t._v("身份证号码是一个长度为15或18个字符的字符串，如果是15位则全部🈶️数字组成，首位不能为0；如果是18位，则前17位全部是数字，末位可能是数字或x，下面我们尝试用正则来表示：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("^[1-9]\\d{13,16}[0-9x]$")]),t._v(" "),n("td",[t._v("110101198001017032")]),t._v(" "),n("td",[t._v("110101198001017032")]),t._v(" "),n("td",[t._v("表示可以匹配一个正确的身份证号")])]),t._v(" "),n("tr",[n("td",[t._v("^[1-9]\\d{13,16}[0-9x]$")]),t._v(" "),n("td",[t._v("1101011980010170")]),t._v(" "),n("td",[t._v("1101011980010170")]),t._v(" "),n("td",[n("code",[t._v("表示也可以匹配这串数字，但这并不是一个正确的身份证号码，它是一个16位的数字")])])]),t._v(" "),n("tr",[n("td",[t._v("^[1-9]\\d{14}(\\d{2}[0-9x])?$")]),t._v(" "),n("td",[t._v("1101011980010170")]),t._v(" "),n("td",[t._v("False")]),t._v(" "),n("td",[n("code",[t._v("现在不会匹配错误的身份证号了()表示分组，将\\d{2}[0-9x]分成一组，就可以整体约束他们出现的次数为0-1次")])])]),t._v(" "),n("tr",[n("td",[t._v("^([1-9]\\d{16}[0-9x]|[1-9]\\d{14})$")]),t._v(" "),n("td",[t._v("110105199812067023")]),t._v(" "),n("td",[t._v("110105199812067023")]),t._v(" "),n("td",[n("code",[t._v("表示先匹配[1-9]\\d{16}[0-9x]如果没有匹配上就匹配[1-9]\\d{14}")])])])])]),t._v(" "),n("h3",{attrs:{id:"转义符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转义符","aria-hidden":"true"}},[t._v("#")]),t._v(" 转义符 \\")]),t._v(" "),n("p",[t._v('在正则表达式中，有很多有特殊意义的是元字符，比如\\n和\\s等，如果要在正则中匹配正常的"\\n"而不是"换行符"就需要对""进行转义，变成\'\\\'。')]),t._v(" "),n("p",[t._v("在python中，无论是正则表达式，还是待匹配的内容，都是以字符串的形式出现的，在字符串中\\也有特殊的含义，本身还需要转义。所以如果匹配一次\"\\n\",字符串中要写成'\\n'，那么正则里就要写成\"\\\\n\",这样就太麻烦了。这个时候我们就用到了r'\\n'这个概念，此时的正则是r'\\n'就可以了。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("False")]),t._v(" "),n("td",[n("code",[t._v("因为在正则表达式中\\是有特殊意义的字符，所以要匹配\\n本身，用表达式\\n无法匹配")])])]),t._v(" "),n("tr",[n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("\\n")]),t._v(" "),n("td",[t._v("True")]),t._v(" "),n("td",[n("code",[t._v("转义\\之后变成\\\\，即可匹配")])])]),t._v(" "),n("tr",[n("td",[t._v('"\\\\n"')]),t._v(" "),n("td",[t._v("'\\n'")]),t._v(" "),n("td",[t._v("True")]),t._v(" "),n("td",[n("code",[t._v("如果在python中，字符串中的'\\'也需要转义，所以每一个字符串'\\'又需要转义一次")])])]),t._v(" "),n("tr",[n("td",[t._v("r'\\n'")]),t._v(" "),n("td",[t._v("r'\\n'")]),t._v(" "),n("td",[t._v("True")]),t._v(" "),n("td",[n("code",[t._v("在字符串之前加r，让整个字符串不转义")])])])])]),t._v(" "),n("h3",{attrs:{id:"贪婪匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪匹配")]),t._v(" "),n("p",[t._v("贪婪匹配：在满足匹配时，匹配尽可能长的字符串，默认采用贪婪匹配 (这里写html标签的话会vue报错,意会吧)")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("正则")]),t._v(" "),n("th",[t._v("待匹配字符")]),t._v(" "),n("th",[t._v("匹配 结果")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("<.*>")]),t._v(" "),n("td",[t._v("标签内容标签")]),t._v(" "),n("td",[t._v("整个标签和内容")]),t._v(" "),n("td",[n("code",[t._v("默认为贪婪匹配模式，会匹配尽量长的字符串")])])]),t._v(" "),n("tr",[n("td",[t._v("<.*?>")]),t._v(" "),n("td",[t._v("标签内容标签")]),t._v(" "),n("td",[t._v("头尾两标签")]),t._v(" "),n("td",[n("code",[t._v("加上？转为非贪婪匹配模式，会匹配尽量短的字符串")])])])])]),t._v(" "),n("h5",{attrs:{id:"几个常用的非贪婪匹配pattern"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几个常用的非贪婪匹配pattern","aria-hidden":"true"}},[t._v("#")]),t._v(" 几个常用的非贪婪匹配Pattern")]),t._v(" "),n("div",{staticClass:"language-txt extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("*? 重复任意次，但尽可能少重复\n+? 重复1次或更多次，但尽可能少重复\n?? 重复0次或1次，但尽可能少重复\n{n,m}? 重复n到m次，但尽可能少重复\n{n,}? 重复n次以上，但尽可能少重复\n")])])]),n("h5",{attrs:{id:"的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#的用法","aria-hidden":"true"}},[t._v("#")]),t._v(" .*?的用法")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" 是任意字符\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 是取 "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 至 无限长度\n? 是非贪婪模式。\n何在一起就是 取尽量少的任意字符，一般不会这么单独写，他大多用在：\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("?x\n\n就是取前面任意长度的字符，直到一个x出现\n")])])]),n("h4",{attrs:{id:"匹配模式举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配模式举例","aria-hidden":"true"}},[t._v("#")]),t._v(" 匹配模式举例")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1,之前学过的字符串的常用操作：一对一匹配")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# s1 = 'fdskahf太白金星'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(s1.find('太白'))  # 7")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2，正则匹配：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单个字符匹配")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\w 与 \\W")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\w', '太白jx 12*() _'))  # ['太', '白', 'j', 'x', '1', '2', '_']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\W', '太白jx 12*() _'))  # [' ', '*', '(', ')', ' ']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\s 与\\S")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\s','太白barry*(_ \\t \\n'))  # [' ', '\\t', ' ', '\\n']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\S','太白barry*(_ \\t \\n'))  # ['太', '白', 'b', 'a', 'r', 'r', 'y', '*', '(', '_']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\d 与 \\D")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\d','1234567890 alex *（_'))  # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\D','1234567890 alex *（_'))  # [' ', 'a', 'l', 'e', 'x', ' ', '*', '（', '_']")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\A 与 ^")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\Ahel','hello 太白金星 -_- 666'))  # ['hel']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('^hel','hello 太白金星 -_- 666'))  # ['hel']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\Z、\\z 与 $  @@")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('666\\Z','hello 太白金星 *-_-* \\n666'))  # ['666']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('666\\z','hello 太白金星 *-_-* \\n666'))  # []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('666$','hello 太白金星 *-_-* \\n666'))  # ['666']")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\n 与 \\t")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\n','hello \\n 太白金星 \\t*-_-*\\t \\n666'))  # ['\\n', '\\n']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('\\t','hello \\n 太白金星 \\t*-_-*\\t \\n666'))  # ['\\t', '\\t']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重复匹配")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# . ? * + {m,n} .* .*?")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# . 匹配任意字符，除了换行符（re.DOTALL 这个参数可以匹配\\n）。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a.b', 'ab aab a*b a2b a牛b a\\nb'))  # ['aab', 'a*b', 'a2b', 'a牛b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a.b', 'ab aab a*b a2b a牛b a\\nb',re.DOTALL))  # ['aab', 'a*b', 'a2b', 'a牛b']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ？匹配0个或者1个由左边字符定义的片段。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a?b', 'ab aab abb aaaab a牛b aba**b'))  # ['ab', 'ab', 'ab', 'b', 'ab', 'b', 'ab', 'b']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# * 匹配0个或者多个左边字符表达式。 满足贪婪匹配 @@")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a*b', 'ab aab aaab abbb'))  # ['ab', 'aab', 'aaab', 'ab', 'b', 'b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('ab*', 'ab aab aaab abbbbb'))  # ['ab', 'a', 'ab', 'a', 'a', 'ab', 'abbbbb']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# + 匹配1个或者多个左边字符表达式。 满足贪婪匹配  @@")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a+b', 'ab aab aaab abbb'))  # ['ab', 'aab', 'aaab', 'ab']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# {m,n}  匹配m个至n个左边字符表达式。 满足贪婪匹配  @@")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a{2,4}b', 'ab aab aaab aaaaabb'))  # ['aab', 'aaab']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .* 贪婪匹配 从头到尾.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a.*b', 'ab aab a*()b'))  # ['ab aab a*()b']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .*? 此时的?不是对左边的字符进行0次或者1次的匹配,")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 而只是针对.*这种贪婪匹配的模式进行一种限定:告知他要遵从非贪婪匹配 推荐使用!")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a.*?b', 'ab a1b a*()b, aaaaaab'))  # ['ab', 'a1b', 'a*()b']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# []: 括号中可以放任意一个字符,一个中括号代表一个字符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - 在[]中表示范围,如果想要匹配上- 那么这个-符号不能放在中间.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^ 在[]中表示取反的意思.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a.b', 'a1b a3b aeb a*b arb a_b'))  # ['a1b', 'a3b', 'a4b', 'a*b', 'arb', 'a_b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[abc]b', 'aab abb acb adb afb a_b'))  # ['aab', 'abb', 'acb']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[0-9]b', 'a1b a3b aeb a*b arb a_b'))  # ['a1b', 'a3b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[a-z]b', 'a1b a3b aeb a*b arb a_b'))  # ['aeb', 'arb']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[a-zA-Z]b', 'aAb aWb aeb a*b arb a_b'))  # ['aAb', 'aWb', 'aeb', 'arb']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[0-9][0-9]b', 'a11b a12b a34b a*b arb a_b'))  # ['a11b', 'a12b', 'a34b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[*-+]b','a-b a*b a+b a/b a6b'))  # ['a*b', 'a+b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - 在[]中表示范围,如果想要匹配上- 那么这个-符号不能放在中间.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[-*+]b','a-b a*b a+b a/b a6b'))  # ['a-b', 'a*b', 'a+b']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('a[^a-z]b', 'acb adb a3b a*b'))  # ['a3b', 'a*b']")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 练习:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到字符串中'alex_sb ale123_sb wu12sir_sb wusir_sb ritian_sb' 的 alex wusir ritian")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('([a-z]+)_sb','alex_sb ale123_sb wusir12_sb wusir_sb ritian_sb'))")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分组:")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# () 制定一个规则,将满足规则的结果匹配出来")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('(.*?)_sb', 'alex_sb wusir_sb 日天_sb'))  # ['alex', ' wusir', ' 日天']")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用举例:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('href=\"(.*?)\"','<a href=\"http://www.baidu.com\">点击</a>'))#['http://www.baidu.com']")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# | 匹配 左边或者右边")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('alex|太白|wusir', 'alex太白wusiraleeeex太太白odlb'))  # ['alex', '太白', 'wusir', '太白']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('compan(y|ies)','Too many companies have gone bankrupt, and the next one is my company'))  # ['ies', 'y']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(re.findall('compan(?:y|ies)','Too many companies have gone bankrupt, and the next one is my company'))  # ['companies', 'company']")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分组() 中加入?: 表示将整体匹配出来而不只是()里面的内容。")]),t._v("\n")])])]),n("h4",{attrs:{id:"常用方法举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用方法举例","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用方法举例")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eva egon yuan'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回所有满足匹配条件的结果,放在列表里")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 : ['a', 'a']")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eva egon yuan'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 : 'a'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 函数会在字符串内查找模式匹配,只到找到第一个匹配然后返回一个包含匹配信息的对象,该对象可以")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过调用group()方法得到匹配的字符串,如果字符串没有匹配，则返回None。")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同search,不过尽在字符串开始处进行匹配")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 : 'a'")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[ab]'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcd'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先按'a'分割得到''和'bcd',在对''和'bcd'分别按'b'分割")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['', '', 'cd']")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\d'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'H'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eva3egon4yuan4'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将数字替换成'H'，参数1表示只替换1个")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#evaHegon4yuan4")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\d'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'H'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eva3egon4yuan4'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将数字替换成'H'，返回元组(替换的结果,替换了多少次)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nobj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("compile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\d{3}'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将正则表达式编译成为一个 正则表达式对象，规则要匹配的是3个数字")]),t._v("\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc123eeee'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#正则表达式对象调用search，参数为待匹配的字符串")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 ： 123")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finditer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\d'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ds3sy4784a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#finditer返回一个存放匹配结果的迭代器")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <callable_iterator object at 0x10195f940>")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看第一个结果")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看第二个结果")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看剩余的左右结果")]),t._v("\n")])])]),n("h5",{attrs:{id:"注意："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意：","aria-hidden":"true"}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),n("p",[t._v("1 findall的优先级查询")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.(baidu|oldboy).com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.oldboy.com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['oldboy']     这是因为findall会优先把匹配结果组里内容返回,如果想要匹配结果,取消权限即可")]),t._v("\n\nret "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.(?:baidu|oldboy).com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.oldboy.com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['www.oldboy.com']")]),t._v("\n")])])]),n("p",[t._v("2 split的优先级查询")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("ret"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\d+"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eva3egon4yuan"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 ： ['eva', 'egon', 'yuan']")]),t._v("\n\nret"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(\\d+)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eva3egon4yuan"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#结果 ： ['eva', '3', 'egon', '4', 'yuan']")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在匹配部分加上（）之后所切出的结果是不同的，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#没有（）的没有保留所匹配的项，但是有（）的却能够保留了匹配的项，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个在某些需要保留匹配部分的使用过程是非常重要的。")]),t._v("\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);